# KTX Macro V2 - Cursor Rules

## 프로젝트 개요
**KTX Macro V2**는 이미지 매칭 기반의 매크로 자동화 도구로, PyQt6 GUI를 통해 직관적인 사용자 경험을 제공합니다.

### 주요 특징
- 이미지 기반 화면 인식 및 자동화
- PyQt6 기반 모던 GUI 인터페이스
- 텔레그램 알림 연동
- 크로스 플랫폼 지원 (Windows/macOS/Linux)

## 기술 스택
- **언어**: Python 3.9+
- **GUI**: PyQt6
- **이미지 처리**: OpenCV
- **자동화**: PyAutoGUI
- **빌드**: UV + Hatch
- **패키지 관리**: UV

## 프로젝트 구조
```
src/ktx_macro/
├── core/              # 핵심 엔진 모듈
│   ├── image_matcher.py   # 이미지 매칭 로직
│   ├── screen_capture.py  # 화면 캡쳐 기능
│   ├── input_controller.py # 키보드/마우스 제어
│   ├── macro_engine.py    # 매크로 실행 엔진
│   └── telegram_bot.py    # 텔레그램 연동
├── models/            # 데이터 모델
│   └── macro_models.py    # 매크로 관련 데이터 구조
├── ui/               # GUI 인터페이스
│   ├── main_window.py     # 메인 애플리케이션 윈도우
│   ├── action_editor.py   # 액션 편집 다이얼로그
│   ├── capture_dialog.py  # 화면 캡쳐 다이얼로그
│   ├── sequence_editor.py # 시퀀스 편집기
│   └── settings_dialog.py # 설정 다이얼로그
└── utils/            # 유틸리티 모듈
    ├── logger.py         # 로깅 시스템
    ├── config_validator.py # 설정 검증
    ├── file_utils.py     # 파일 처리 유틸리티
    └── system_utils.py   # 시스템 정보 및 유틸리티
```

## 코딩 규칙

### 1. 코드 스타일
- **포맷터**: Black (라인 길이: 88자)
- **임포트 정렬**: isort (black 프로필)
- **린팅**: flake8
- **타입 체킹**: mypy (엄격 모드)

### 2. 네이밍 컨벤션
- **클래스**: PascalCase (예: `MainWindow`, `MacroEngine`)
- **함수/메소드**: snake_case (예: `execute_sequence`, `load_config`)
- **상수**: UPPER_SNAKE_CASE (예: `DEFAULT_TIMEOUT`)
- **프라이빗 메소드**: `_` 접두사 (예: `_execute_action`)

### 3. 문서화
- 모든 공개 함수/클래스에 docstring 작성
- 한국어 docstring 우선 (프로젝트가 한국어 기반)
- 함수 파라미터 및 반환값 문서화

### 4. 타입 힌팅
- 모든 함수에 타입 힌팅 사용
- Optional 타입 적극 활용
- 제네릭 타입 사용 (List, Dict, Tuple 등)

## 최근 변경사항 (중요)

### ✅ 완료된 리팩토링
1. **이미지 템플릿 패널 제거**
   - 왼쪽 템플릿 목록 패널 완전 제거
   - 메인 패널로 통합
   - 관련 코드 모두 정리

2. **FIND_IMAGE 액션 타입 제거**
   - ActionType.FIND_IMAGE 완전 제거
   - 관련 UI 및 엔진 코드 정리
   - 시퀀스 에디터에서 제거

3. **이미지 캡쳐 기능 통합**
   - 액션 에디터에서 직접 이미지 캡쳐 가능
   - 캡쳐된 이미지 미리보기 표시
   - 클릭 위치 시각적 지정 기능 추가

### 🔄 현재 아키텍처
- **액션 기반**: 클릭, 더블클릭, 우클릭, 텍스트 입력, 키 입력, 대기, 텔레그램 전송
- **이미지 통합**: 액션별 이미지 캡쳐 및 미리보기
- **이벤트 기반**: 부모-자식 컴포넌트 간 이벤트 연결
- **모델 중심**: 데이터 모델 기반 아키텍처

## 개발 가이드라인

### 1. UI 개발
- PyQt6 시그널/슬롯 패턴 사용
- 메모리 누수 방지를 위한 `WA_DeleteOnClose` 설정
- 스레드 안전한 UI 업데이트 (`QTimer.singleShot`)
- 한국어 UI 텍스트 사용

### 2. 비즈니스 로직
- Core 모듈에서 순수 로직 구현
- UI와 비즈니스 로직 분리
- 예외 처리 철저히
- 로깅 적극 활용

### 3. 데이터 모델
- dataclass 적극 활용
- JSON 직렬화/역직렬화 지원
- 유효성 검증 구현
- 버전 관리 고려

### 4. 테스트
- pytest 사용
- 단위 테스트와 통합 테스트 분리
- CI/CD 파이프라인 구축

## 중요 제약사항

### 1. 플랫폼 호환성
- Windows/macOS/Linux 크로스 플랫폼 지원
- 플랫폼별 폰트 및 UI 조정
- 파일 경로 처리 시 플랫폼 고려

### 2. 성능 고려사항
- 이미지 처리 최적화 (OpenCV)
- UI 응답성 유지
- 메모리 사용량 관리

### 3. 보안
- 사용자 입력 검증
- 파일 시스템 접근 제한
- 텔레그램 토큰 안전하게 관리

## 커밋 메시지 규칙
```
feat: 새로운 기능 추가
fix: 버그 수정
refactor: 코드 리팩토링
docs: 문서 수정
style: 코드 스타일 수정 (포맷팅 등)
test: 테스트 코드 추가/수정
chore: 기타 작업 (빌드, 설정 등)
```

## FAQ

**Q: 왜 한국어로 개발하나요?**
A: 이 프로젝트는 한국어 사용자 기반으로 설계되었으며, UI와 문서가 한국어로 제공됩니다.

**Q: 이미지 매칭 정확도는 어느 정도인가요?**
A: OpenCV 기반으로 70-90% 신뢰도 임계값을 권장하며, 상황에 따라 조정 가능합니다.

**Q: 텔레그램 연동은 필수인가요?**
A: 선택 기능입니다. 설정에서 활성화/비활성화할 수 있습니다.

---

*이 규칙은 프로젝트의 일관성과 유지보수성을 위해 만들어졌습니다. 새로운 개발자는 이 문서를 숙지한 후 개발을 시작해주세요.*
